// #SKETCHNAME LED matrix
// based on characters from: https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h
const chars = [
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 00
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 01
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 02
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 03
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 04
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 05
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 06
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 07
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 08
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 09
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0A
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0B
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0C
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0D
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0E
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 0F
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 10
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 11
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 12
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 13
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 14
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 15
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 16
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 17
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 18
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 19
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1A
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1B
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1C
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1D
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1E
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 1F
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 20 (space)
    [ 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 ],   // 21 (!)
    [ 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 22 (")
    [ 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00 ],   // 23 (#)
    [ 0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00 ],   // 24 ($)
    [ 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00 ],   // 25 (%)
    [ 0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00 ],   // 26 (&)
    [ 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 27 (')
    [ 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00 ],   // 28 (()
    [ 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00 ],   // 29 ())
    [ 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 ],   // 2A (*)
    [ 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00 ],   // 2B (+)
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60 ],   // 2C (,)
    [ 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00 ],   // 2D (-)
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00 ],   // 2E (.)
    [ 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00 ],   // 2F (/)
    [ 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00 ],   // 30 (0)
    [ 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00 ],   // 31 (1)
    [ 0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00 ],   // 32 (2)
    [ 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00 ],   // 33 (3)
    [ 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00 ],   // 34 (4)
    [ 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00 ],   // 35 (5)
    [ 0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00 ],   // 36 (6)
    [ 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00 ],   // 37 (7)
    [ 0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00 ],   // 38 (8)
    [ 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00 ],   // 39 (9)
    [ 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00 ],   // 3A (:)
    [ 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60 ],   // 3B (//
    [ 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00 ],   // 3C (<)
    [ 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00 ],   // 3D (=)
    [ 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00 ],   // 3E (>)
    [ 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00 ],   // 3F (?)
    [ 0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00 ],   // 40 (@)
    [ 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00 ],   // 41 (A)
    [ 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00 ],   // 42 (B)
    [ 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00 ],   // 43 (C)
    [ 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00 ],   // 44 (D)
    [ 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00 ],   // 45 (E)
    [ 0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00 ],   // 46 (F)
    [ 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00 ],   // 47 (G)
    [ 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00 ],   // 48 (H)
    [ 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 ],   // 49 (I)
    [ 0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00 ],   // 4A (J)
    [ 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00 ],   // 4B (K)
    [ 0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00 ],   // 4C (L)
    [ 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00 ],   // 4D (M)
    [ 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00 ],   // 4E (N)
    [ 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00 ],   // 4F (O)
    [ 0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00 ],   // 50 (P)
    [ 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00 ],   // 51 (Q)
    [ 0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00 ],   // 52 (R)
    [ 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00 ],   // 53 (S)
    [ 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 ],   // 54 (T)
    [ 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00 ],   // 55 (U)
    [ 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00 ],   // 56 (V)
    [ 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00 ],   // 57 (W)
    [ 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00 ],   // 58 (X)
    [ 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00 ],   // 59 (Y)
    [ 0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00 ],   // 5A (Z)
    [ 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00 ],   // 5B ([)
    [ 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00 ],   // 5C (\)
    [ 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00 ],   // 5D (])
    [ 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00 ],   // 5E (^)
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ],   // 5F (_)
    [ 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 60 (`)
    [ 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00 ],   // 61 (a)
    [ 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00 ],   // 62 (b)
    [ 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00 ],   // 63 (c)
    [ 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00 ],   // 64 (d)
    [ 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00 ],   // 65 (e)
    [ 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00 ],   // 66 (f)
    [ 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8 ],   // 67 (g)
    [ 0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00 ],   // 68 (h)
    [ 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00 ],   // 69 (i)
    [ 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78 ],   // 6A (j)
    [ 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00 ],   // 6B (k)
    [ 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 ],   // 6C (l)
    [ 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00 ],   // 6D (m)
    [ 0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00 ],   // 6E (n)
    [ 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00 ],   // 6F (o)
    [ 0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0 ],   // 70 (p)
    [ 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E ],   // 71 (q)
    [ 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00 ],   // 72 (r)
    [ 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00 ],   // 73 (s)
    [ 0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00 ],   // 74 (t)
    [ 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00 ],   // 75 (u)
    [ 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00 ],   // 76 (v)
    [ 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00 ],   // 77 (w)
    [ 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00 ],   // 78 (x)
    [ 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8 ],   // 79 (y)
    [ 0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00 ],   // 7A (z)
    [ 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00 ],   // 7B ([)
    [ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ],   // 7C (|)
    [ 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00 ],   // 7D (])
    [ 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],   // 7E (~)
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]    // 7F
];

background("LightBlue");

var display1 = createDisplay(80, 112, "Black", 51, 5, 2, 1);
printText("I love to code on CodeGuppy.com", display1, 10, 1, "Orange");
printText("at", display1, 32, 50, "Lime");
printText("CodeGuppy.com", display1, 54, 5, "random");

// optional decoration
sprite('adventure_girl', 100, 475, 0.5);

function loop()
{
    display(display1, 10, 10);
    scrollUp(display1);
}

// Creates a LED display with specified with specified parameters
function createDisplay(noRows, noCols, background, ledOff, dotSize, dotSpace, dotStyle)
{
    function createBuffer(noRows, noCols)
    {
        var mat = new Array(noRows);
        
        for(var i = 0; i < mat.length; i++)
        {
            mat[i] = new Array(noCols);
        }
            
        return mat;
    }
    
    var display = {
      noRows : noRows,
      noCols : noCols,
      background : background,
      ledOff : ledOff,
      dotSize : dotSize,
      dotSpace : dotSpace,
      dotStyle : dotStyle,
      buff : createBuffer(noRows, noCols)
    }

    return display;
}

// Displays the LED display on the canvas
function display(display, x, y)
{
    function displayDot(row, col, color, display)
    {
        var xd = display.x + col * (display.dotSize + display.dotSpace);
        var yd = display.y + row * (display.dotSize + display.dotSpace);
    
        fill( ledOff(color) ? display.ledOff : color );
        
        switch(display.dotStyle)
        {
            case 1:
                circle(xd + display.dotSize / 2, yd + display.dotSize / 2, display.dotSize / 2 );
                break;
            case 2:
                rect(xd, yd, display.dotSize, display.dotSize);
                break;
        }
    }

    var buff = display.buff;
    noStroke();
    
    display.x = x;
    display.y = y;
    
    if (display.background)
    {
        fill(display.background);
        rect(x, y, displayWidth(display), displayHeight(display));
    }
    
    for(var row = 0; row < buff.length; row++)
    {
        var arRow = buff[row];
        
        for(var col = 0; col < arRow.length; col++)
        {
            displayDot(row, col, arRow[col], display);
        }
    }
}

// Returns the width of LED display in pixels
function displayWidth(display)
{
    var w = display.noCols * display.dotSize + (display.noCols - 1) * display.dotSpace;
    return w;
}

// Returns the height of LED display in pixels
function displayHeight(display)
{
    var h = display.noRows * display.dotSize + (display.noRows - 1) * display.dotSpace;
    return h;
}

// Clears the LED display
function clearDisplay(display)
{
    var buff = display.buff;
    
    for(var row of buff)
    {
        for(var i = 0; i < row.length; i++)
        {
            row[i] = 0;
        }
    }
}

// Print a string on the LED display at specified row and column
function printText(text, display, displayrow, displaycol, color)
{
    for(var i = 0; i < text.length; i++)
    {
        var chr = text[i];
        
        var col = displaycol + i * 8;
        printChar(chr, display, displayrow, col, color);
    }
}

// Print a single character on the LED display
function printChar(chr, display, displayrow, displaycol, color)
{
    var code = chr.charCodeAt(0);
    var bmp = chars[code];

    if (color == "random")
        color = random(["Red", "Green", "Pink", "Blue", "Orange", "Snow", "Magenta"])

    for(var row = 0; row < bmp.length; row++)
    {
        var t = numberToBinary(bmp[row], 8);

        for(var col = 0; col < t.length; col++)
        {
            if (t[col] == 1)
                printDot(display, displayrow + row, displaycol + col, color);
        }
    }
}

// Print a dot on the LED display
function printDot(display, dotrow, dotcol, color)
{
    var buff = display.buff;
    var buffCols = buff[0].length;
    
    if (dotrow < 0 || dotrow >= buff.length )
        return;
        
    if (dotcol < 0 || dotcol >= buffCols)
        return;

    buff[dotrow][dotcol] = color;
}

// Converts a binary to string of specified length 
function numberToBinary(n, bits)
{
    var txt = n.toString(2);
    
    while(txt.length < bits)
        txt = "0" + txt;
        
    return txt;
}

// Scroll the LED display up by rotating the elements in the buffer
function scrollUp(display)
{
    var buff = display.buff;

    var el = buff.shift();
    buff.push(el);
}

function ledOff(color)
{
    return color == null || color == "" ||
            color == 0 || color == "#000000" || 
            color.toString().toUpperCase() == "BLACK";
}
