BIG TICKET ITEMS
================

1. Secure the firebase assets (implement security)

2. Write tutorials

3. Implement "Forgot password"

4. Implement account activation

5. Implement "Buy Now" flat fee subscription

6. Implement monthly subscription

7. Implement sketch management: e.g. delete sketch

8. Implement "pro" assets (displayed with a "pro" symbol but available only to paid subscribers)

9. Host the site on the official domain (codeguppy?) and open social media accounts...

10. Presentation video to use it on website, youtube ... and also send it to "investors" to explain what codeguppy is

------------------------------------------



RUNTIME
=======

- implement use("sceneName"); to allow creation of modules with functions inside a scene
  E.g. 
    var utils = use("Utils");
    utils.doStuff();
  (note: the function can be named `use` or `require`.)

MISC
====


- implement layered backgrounds ... which are basically a static background plus an animated "sketch"
  the user will use background("static,animated");

- investigate splitter from https://github.com/nathancahill/Split.js

- need to make sure it runs in minimum resolution 1024x768 (check vertical resolution as well)

- maybe sketches should autorun upon opening (e.g. uncomment the run() line in Shell.js) ??

- also ... maybe if there is no code in the sketch / scene, then the draw() should display a nice message / animation
  instructing how to write code... e.g. in Sketch.js -> getSceneWrapper() and CodeUtils.js -> getSceneFunction()
  
- consider the following functions:
  - noClear() <-- the main draw won't apply automatically the background clearing the screen for the loop()
  - fastLoop() <-- by default the scenes will run with buffering ... but if this call is present in the static area... then the scene will be run without buffering (currently there is the "buffer" query string parameter to control this behavior)

  ... OR ...

- consider adding also event draw() to be used in advanced sketches in place of loop()
  If user will use draw() then the engine won't clear the screen automatically ... and no buffering will be used! - Like in p5.js

- use * tippyjs for the buttons in the actionbar

- allow passing animation name in the sprite("sprite.animation") function...
  (useful when having a sprite full of single frame animations -- eg. for ui: buttons.ok, etc. )

TUTORIALS
=========

- make a folder on the website called "tutorials" ... this folder will contain 1 subfolder for each tutorial (each tutorial will be self contained to this folder)
- in the subfolder will be a file start.json which will contain information about tutorial (a tutorial is basically a list of pages each of them with an associated multi-scene sketch):
    Page: [ {
              Title: "Introducing graphics",
              Sketch: "sketches/sketch1.js",
              DocPage : "html/page1.html"
          },
          ...
        ]
- in the code.html will have in the actionbar a new button, that will be visible *only* if code.html has been opened with a tutorial in querystring. E.g. code.html?tut9045
- the tutorial button will basically open a "sidebar" with 3 parts: a title on top, a medium part listing the html page, a bottom part with navigation buttons: E.g. "<"  1/100 ">"
- a navigation button will load *both* an html page as well as the corresponding sketch file
- users will be able to play with the code at any step... and if they want, they can hit the *Fork* button to make the sketch their own
- the main page on the site will list all these various tutorial with nice thumbnails


TUTORIAL FORMAT ALTERNATIVES
============================

- insted of HTML tutorials, use markdown tutorials rendered on the client-side from MD -> HTML using an open source component
- also think about bundling *.md and *.js files in a single tutorial file that can be parsed on the client-side in the same way a multi-scene code is split and parsed


TUTORIAL VIDEOS
===============

- use fiverr to record a small video intro for each tutorial. The main page with thumbnails will offer the posibility to "watch video" and / or "see tutorial".
- some tutorials will be available to paid members only. In that case only the "watch video" will be available to server as a teaser



MAIN PAGE and general features
==============================


Unauthenticated user

---------------------------------------------------------------------------------------------------------------
[LOGO]   [Tutorials]   [Sketches]  					                                        [Code]  [Log in] [Sign Up]
---------------------------------------------------------------------------------------------------------------

- display nicely the tutorial tiles
	- message - create a member account to discover more tutorials...
- display nicely:
	- picked sketches (stored on web server)
	- message - create a free account to create and share your own sketches


Authenticated user

---------------------------------------------------------------------------------------------------
[LOGO]   [Tutorials]   [Sketches]                                          					[Code]  [User]
---------------------------------------------------------------------------------------------------

- display nicely the tutorial tiles
- display nicely:
	- picked sketches (stored on web server)
	- "my" sketches <-- user sketches



Code editor

------------------------------------------------------------------------------------------------------
[...]  [LOGO]  [Sketch Name]				                                    [Reload] [Save a copy] [Exit]
------------------------------------------------------------------------------------------------------

DECIDE: Do I need a burger menu in the code editor? ... and all the other pages?


- Portfolio / Personal page
- page showing public sketches of a user

- Social system
- follow users (e.g. good to follow sketches done by colleagues)

- Extend sketches page to display:
	- popular sketches
	- picked sketches

- Allow to "like" sketches

- Keep track of sketch views (counter)

	

